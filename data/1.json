

[
    {
        "program": "1. Express Server Example",
        "brief": "Create an Express server with routes for serving HTML files and handling JSON input.",
        "codeSnippet": "\nconst express = require('express');\nconst app = express();\nconst path = require('path');\nconst PORT = 3000;\n\n\napp.get('/', (req, res) => {\n    console.log('This is the home page');\n    res.send('This is the home page');\n});\n\n// Serve static HTML files\napp.get('/renderHtml', (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\napp.listen(PORT, () => {\n    console.log('Listening at port 3000 of computer');\n});",
        "conceptual_summary": "This Express server demonstrates one way to connect frontend and backend by rendering HTML files. When a specific route is requested, such as /renderHtml, the server sends an HTML file to the browser. This setup illustrates a basic method for serving static content from the backend."
    },    
    
    {
        "program": "2. Express Server with EJS",
        "brief": "Set up an Express server that uses EJS for templating, serves static HTML files, and includes routes for rendering views.",
        "codeSnippet": "\nconst express = require('express');\nconst app = express();\nconst path = require('path');\nconst PORT = 3000;\n\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\n\napp.get('/', (req, res) => {\n    console.log('This is the home page');\n    res.send('This is the home page');\n});\n\n// Serve static HTML files\napp.get('/renderHtml', (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\napp.get('/1', (req, res) => {\n    res.render('index');\n});\n\napp.listen(PORT, () => {\n    console.log('Listening at port 3000 of computer');\n});",
        "conceptual_summary": "This Express server uses EJS for dynamic HTML rendering, allowing server-side generation of pages with embedded JavaScript. Basically using same html page to show different data.\n\nIt is simple html with .ejs as extension and a way to use js logic directly in html."
    },
    {
        "program": "3. Setup static files (ignore for now)",
        "brief": "Setup option to feed static files, .js and .css from public folder",
        "codeSnippet": "app.use(express.static(path.join(__dirname, 'public')));",
        "conceptual_summary": ""
    }
    
    
]