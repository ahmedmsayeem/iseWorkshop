

[
    {
        "program": "1. Express Server with EJS Example",
        "brief": "Create an Express server with routes for rendering HTML using EJS and passing data to the frontend.",
        "codeSnippet": "\nconst express = require('express');\nconst app = express();\nconst path = require('path');\nconst PORT = 3000;\nconst data = require('./data/1.json');\n\n// Set up EJS as the view engine\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\n\n// Route for the home page\napp.get('/', (req, res) => {\n    console.log('Attempted to access /');\n    res.render('index', { data: 'any data we can send from backend to frontend' });\n});\n\n// Route for rendering a page with programs data\napp.get('/1', (req, res) => {\n    res.render('programs', { data: '1', programs: data });\n});\n\n// Start the server\napp.listen(PORT, () => {\n    console.log('Listening at port 3000 of computer');\n});",
        "conceptual_summary": "In the previous example, we saw how to render EJS files instead of just HTML. Using EJS lets us easily send data from the backend to the frontend, making it simple to generate dynamic content based on server-side information."
    }
    ,    
    {
        "program": "2. Express Server with EJS and Multiple Routes",
        "brief": "Set up an Express server with EJS to render views with data passed from the backend, including multiple routes handling different datasets.",
        "codeSnippet": "\nconst express = require('express');\nconst app = express();\nconst path = require('path');\nconst PORT = 3000;\n\n// Import JSON data for each route\nconst data1 = require('./data/1.json');\nconst data2 = require('./data/2.json');\nconst data3 = require('./data/3.json');\n\n// Set up EJS as the view engine\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\n\n// Route for the home page\napp.get('/', (req, res) => {\n    console.log('Attempted to access /');\n    res.render('index', { data: 'any data we can send from backend to frontend' });\n});\n\n// Route 1: Render 'programs' view with data1\napp.get('/1', (req, res) => {\n    res.render('programs', { data: '1', programs: data1 });\n});\n\n// Route 2: Render 'programs' view with data2\napp.get('/2', (req, res) => {\n    res.render('programs', { data: '2', programs: data2 });\n});\n\n// Route 3: Render 'programs' view with data3\napp.get('/3', (req, res) => {\n    res.render('programs', { data: '3', programs: data3 });\n});\n\n// Start the server\napp.listen(PORT, () => {\n    console.log(`Listening at port ${PORT} of computer`);\n});",
        "conceptual_summary": "Now, we use Express with EJS to handle multiple routes and send data to the frontend. Just like in the previous example, weâ€™re importing data from three different JSON files and sending it to the frontend for rendering. Each route ('/1', '/2', and '/3') serves a different dataset, making it easy to dynamically generate content based on the imported data."
    }
    
    

    
    
]